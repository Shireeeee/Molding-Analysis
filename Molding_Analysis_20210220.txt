% 导入料号及对应需求

 format long g
 MaterialNumDemand = xlsread('F:\DEMAND/壳体料号对应需求.xlsx','sheet1')

% 导入个各模具的产能矩阵

 Path = 'F:\Moulds Analysis';                       % 设置数据存放的文件夹路径
 cd(Path);                                          % 把当前工作目录切换到指定文件夹
 File = dir(fullfile(Path,'*.xlsx'));               % 显示文件夹下所有符合后缀名为.xlsx文件的完整信息
 FileNames = {File.name}';                          % 提取符合后缀名为.xlsx的所有文件的文件名，转换为n行1列的cell数据
 FileCounts = size(FileNames,1);                    % xlsx文件的数量
 Reports = {[]}
 for i = 1:FileCounts                               % 或者for i = 1:length(FileNames)
    Name = FileNames{i};                            % 读取第i个变量名
    OrginalData =importdata(Name);                  % 导入数据

% 匹配产能矩阵与料号对应需求
    SupDemData = []                           
    Row_OrginalData = size(OrginalData,1)
    Column_OrginalData = size(OrginalData,2)
    Row_MaterialNumDemand = size(MaterialNumDemand,1)
    Column_MaterialNumDemand = size(MaterialNumDemand,2)
    OrginalDataFirstRow = OrginalData (1,:)
     

    for Lable_OrginalData = 1 : Row_OrginalData
    for Lable_MaterialNumDemand = 1:Row_MaterialNumDemand 

         if OrginalData(Lable_OrginalData,1) == MaterialNumDemand(Lable_MaterialNumDemand,1)
           
            DemData = MaterialNumDemand(Lable_MaterialNumDemand,2:Column_MaterialNumDemand)   
            SupData = OrginalData(Lable_OrginalData,1:Column_OrginalData)
            Joining_DemData_SupData = [SupData,DemData]
            SupDemData = [SupDemData; Joining_DemData_SupData]
         end
    end
    end

% 判断是否需要对矩阵进行变换

 Row_SupDemData = size(SupDemData,1)
 Column_SupDemData = size(SupDemData,2)
 Zero_SupDemData = zeros(1,Column_SupDemData)

 % 如果只有1行（1个料号），或者只有7列（料号，1套模具，5个月需求），则不用对矩阵进行变换
 if Row_SupDemData == 1 || Column_SupDemData == 7
    FinalMatrix = [SupDemData;Zero_SupDemData]
 else

% 对行排序

 PreTrans = SupDemData        
 Row_PreTrans = size(PreTrans,1)
 Column_PreTrans = size(PreTrans,2)

 DemMatrix = PreTrans(:,Column_PreTrans - 4: Column_PreTrans)          %取出需求矩阵
 Row_DemMatrix = size(DemMatrix,1)      

 MaterialNumMatrix = PreTrans(:,1)                                     %取出料号列
 Row_MaterialNumMatrix = size(MaterialNumMatrix,1) 

 CapacityMatrix = PreTrans(:,2:Column_PreTrans - 5)                    %取出产能矩阵
 NormalizeCapacityMatrix = CapacityMatrix > 0                          %非零元素全部变为1，方便计数
 Count_NormalizeCapacityMatrix = sum(NormalizeCapacityMatrix')         %计数行
 CountDemMatrix = [Count_NormalizeCapacityMatrix' CapacityMatrix]      %把计数列添加到需求矩阵

 Pre_RowTransMatrix = [MaterialNumMatrix CountDemMatrix DemMatrix]     %待变化的矩阵，包括计数列
 [Pro_RowTransMatrix,Index_ProRow] = sortrows(Pre_RowTransMatrix,2)

% 对列排序
 
 Pre_ColumnTransMatrix = Pro_RowTransMatrix                            %行变换后的矩阵,赋值给待列变换的矩阵
 Column_Pro_RowTransMatrix = size(Pro_RowTransMatrix,2)

 %取出待列变换的矩阵的供应
 SupMatrix_ColumnTrans = Pre_ColumnTransMatrix (:,1 : Column_Pro_RowTransMatrix - 5)    

 %取出待列变换的矩阵的需求  
 DemMatrix_ColumnTrans = Pre_ColumnTransMatrix (:,Column_Pro_RowTransMatrix - 4: Column_Pro_RowTransMatrix)    
 Column_DemMatrix_ColumnTrans = size(DemMatrix_ColumnTrans,2)

 %给需求矩阵添加全为0的一行
 Zero_DemMatrix_ColumnTrans = zeros(1, Column_DemMatrix_ColumnTrans)

 %计数行
 TemporaryRow = [DemMatrix_ColumnTrans; Zero_DemMatrix_ColumnTrans]              

 TransposeSupMatrix = SupMatrix_ColumnTrans'
 Row_TransposeSupMatrix = size(TransposeSupMatrix,1)
 SplitTransposeSupMatrix_one = TransposeSupMatrix(1:2,:)
 SplitTransposeSupMatrix_two = TransposeSupMatrix(3: Row_TransposeSupMatrix,:)
 Normalize_SplitTransposeSupMatrix = SplitTransposeSupMatrix_two > 0
 PreCount_Normalize_SplitTransposeSupMatrix = sum(Normalize_SplitTransposeSupMatrix')
 ProCount_Normalize_SplitTransposeSupMatrix = [0 0 PreCount_Normalize_SplitTransposeSupMatrix]
 Pre_ColumnTransMatrix = [TransposeSupMatrix ProCount_Normalize_SplitTransposeSupMatrix']
 Column_Pre_ColumnTransMatrix = size(Pre_ColumnTransMatrix,2)
 [Pro_ColumnTransMatrix,index_ProColumn] = sortrows(Pre_ColumnTransMatrix, Column_Pre_ColumnTransMatrix)

% 生成最终矩阵
 PreparationMatrix = Pro_ColumnTransMatrix'
 JoiningPreparationTemporary = [PreparationMatrix TemporaryRow]     
 Column_JoiningPreparationTemporary = size(JoiningPreparationTemporary,2)

 %去除计数列
 FinalMaterialColumn = JoiningPreparationTemporary (:,1)
 SupAndDemMatrix = JoiningPreparationTemporary (:,3:Column_JoiningPreparationTemporary)

 %最终矩阵
 FinalMatrix = [FinalMaterialColumn SupAndDemMatrix]

 end

 Row_FinalMatrix=size(FinalMatrix,1)
 Column_FinalMatrix=size(FinalMatrix,2)

% 开始分配产能
 %定义产能系数，用于折算每个月剩余天数的产能
 FinalMatrix_Sup = FinalMatrix(:,2:Column_FinalMatrix - 5)
 FinalMatrix_Dem = FinalMatrix(:,Column_FinalMatrix-4:Column_FinalMatrix)

 FinalMatrix_MaterialID = FinalMatrix(:,1)

 RemainCapacity_FirstMon = 1
 RemainCapacity_SecondMon = 1
 RemainCapacity_ThirdMon = 1
 
 FinalMatrix_Sup_FirstMon = FinalMatrix_Sup * RemainCapacity_FirstMon
 FinalMatrix_Sup_SecondMon = FinalMatrix_Sup * RemainCapacity_SecondMon
 FinalMatrix_Sup_ThirdMon = FinalMatrix_Sup * RemainCapacity_ThirdMon
     
% 1.  对第1个月进行分配

 FirstMonMatrix = [FinalMatrix_MaterialID FinalMatrix_Sup_FirstMon FinalMatrix_Dem]
 k = 1                                                    % 从第一个料号开始
 FMM = FirstMonMatrix
 FMM_Copy = FirstMonMatrix
 Row_FMM = size(FMM,1)
 Column_FMM = size(FMM,2) 
    
 while k < Row_FMM                                        % 从第1行到最后一行   
       AggSupA(k) = sum(FMM(k,2:Column_FMM - 5))          % 第k行的总供应,从第二列开始取，算入料号列
       AggDemA(k) = FMM(k,Column_FMM - 4)                 % 第k行第1个月的需求

% 1.1 当供应小于需求时

 % 计算需求
 if AggSupA(k) < AggDemA(k)     
    DiffA(k) = AggDemA(k) - AggSupA(k)                    % 计算该料号在该月的短缺，需求减去该料号的总供应
    FMM(k,Column_FMM-4) = DiffA(k)                        % 将该列的需求变为短缺的值

 % 计算产能
 % 从非料号列第1列开始，找出第k行的非零元素，将这些元素的值替换为0，并且将后面所有行的对应该模具的产能变为0  
 % 注意区分k_0和k_1，在第二层循环时不能用与第一个循环相同的参数，会混淆

     k_1 = 1                                              % 从第1行开始计数
     h_1 = 2                                              % 从第2列开始计数
     k_0 = k
                 
     while   h_1 < Column_FMM - 4
         if  FMM(k_0,h_1) > 0                             % 如果第k_0行第h_1列大于0
             FMM(1:Row_FMM-1,h_1) = 0                     % 对该列所有值,最后一行计数行除外，都赋值为0
         end
         h_1 = h_1 + 1                  
     end
     k_1 = 1                                              % 重新定义k_1的值，否则将会变成上一次循环迭代后的数值
 end  
 % 第k_0行找出完毕
        
% 1.2 当供应大于需求时，且需求不为0时

 if  AggSupA(k) > AggDemA(k) 

     k_2 = k
     h_2 = 2

     while   h_2 < Column_FMM - 4

 % 1.2.1 如果第一个元素小于当月需求，则新的需求是原来的需求减去该元素表示的供应，同时该位置的供应以及该料号所有行的供应变为0
         if  FMM(k_2,h_2) < FMM(k_2,Column_FMM - 4)     

 % 对非0元素执行此操作，0元素表示该模具不生产该料号 
             if  FMM(k_2,h_2) > 0 

                 FMM(k_2,Column_FMM - 4) = FMM(k_2,Column_FMM - 4) - FMM(k_2,h_2)
                 FMM(k_2,h_2) = 0

 % 对该列所有值都赋值为0
                 h_3 = h_2
                 k_3 = 1

                 while  k_3 < Row_FMM                          
                     if  FMM(k_3,h_3) > 0
                        FMM(k_3,h_3) = 0
                     end
                     k_3 =k_3 + 1
                 end  
             end 
         end

 % 1.2.2 如果第一个元素大于当月需求，则需求变为0，同时该位置的供应以及该料号所有行的供应变为原来的供应减去当时的需求
                             
         if  FMM(k_2,h_2) > FMM(k_2,Column_FMM-4)

 % 若需求等于0，则不变
             if  AggDemA(k) == 0
                 FMM(k_2,h_2) = FMM(k_2,h_2);
                 FMM(k_2,Column_FMM-4) = FMM(k_2,Column_FMM-4)
             end

 % 若需求大于0：
             if  AggDemA(k) ~= 0
                 k_4 = 1        
                 h_4 = h_2

                 NetValue_FMM = FMM(k_2,Column_FMM - 4) 
                 NetRate_FMM = NetValue_FMM / FMM_Copy(k_2,h_2)
                 FMM(k_2,Column_FMM - 4) = 0

                 while   k_4 < Row_FMM                          
                     if  FMM(k_4,h_4) > 0
                         FMM(k_4,h_4) = FMM(k_4,h_4) - (FMM_Copy(k_4,h_4)*NetRate_FMM)
                     end
                     k_4 =k_4 + 1
                 end
             end   
         end
         h_2 = h_2 + 1
     end
 end
 %第k行料号执行完毕
 k = k + 1
 end

% 1.3 计算产能剩余或需求剩余

 ProFMM = FMM(1:Row_FMM-1,2:Column_FMM - 5)                 %运算完后的供应矩阵

 %计算每个模具的剩余产能
 ProFMM(find(ProFMM == 0)) = NaN                            %不计算0元素
 FMM_min = min(ProFMM)
 FMM_min(find(isnan(FMM_min) == 1)) = 0

 FirstMonSup = sum(FMM_min)
 FirstMonDem = sum(FMM(:,Column_FMM - 4))
 DeltaFirstMon = FirstMonDem - FirstMonSup

% 2.  对第2个月进行分配
 SecondMonMatrix = [FinalMatrix_MaterialID FinalMatrix_Sup_SecondMon FinalMatrix_Dem]
 j = 1                                                    % 代表第1行
 SMM  = SecondMonMatrix
 SMM_COPY = SMM
 Row_SMM = size(SMM,1)
 Column_SMM = size(SMM,2) 
    
 while   j < Row_SMM                                    % 从第1行到最后一行   
         AggSupB(j) = sum(SMM(j,2:Column_SMM - 5))        % 第j行的总供应,从第二列开始取，算入料号列
         AggDemB(j) = SMM(j,Column_SMM - 3)               % 第j行第2个月的需求

% 2.1 当供应小于需求时

     if  AggSupB(j) < AggDemB(j)     
         DiffB(j) = AggDemB(j) - AggSupB(j)              % 计算该料号在该月的短缺
         SMM(j,Column_SMM-3) = DiffB(j)                  % 将该列的需求变为短缺的值

 % 从非料号列第1列开始，找出第j行的非零元素，将这些元素的值替换为0，并且将后面所有行的对应该模具的产能变为0  
 % 注意区分j_0和j_1，在第二层循环时不能用与第一个循环相同的参数，会混淆

         j_1 = 1                                         % 从第1行开始计数
         t_1 = 2                                         % 从第2列开始计数
         j_0 = j
                 
         while   t_1 < Column_SMM - 4
             if  SMM(j_0,t_1) > 0                        %如果第j_0行第t_1列大于0
                 SMM(1:Row_SMM-1,t_1) = 0                  %对该列除第一行总供应行所有值都赋值为0
             end
             t_1 = t_1 + 1                  
         end
         j_1 = 1                                         %重新定义j_1的值，否则将会变成上一次循环迭代后的数值
     end  
    %  第j_0行的找出完毕
        
% 2.2 当供应大于需求时，且需求不为0时

        if   AggSupB(j) > AggDemB(j) 

             j_2 = j
             t_2 = 2
             while   t_2 < Column_SMM-4

 % 2.2.1 如果第一个元素小于当月需求，则新的需求是原来的需求减去该元素表示的供应，同时该位置的供应以及该料号【以下的行，还是所有行？】在这里是所有行的供应变为0
             if  SMM(j_2,t_2) < SMM(j_2,Column_SMM - 3)  

    %对非0元素执行此操作，0元素表示该模具不生产该料号 
                 if  SMM(j_2,t_2) > 0 

                     SMM(j_2,Column_SMM - 3) = SMM(j_2,Column_SMM - 3) - SMM(j_2,t_2)
                     SMM(j_2,t_2) = 0

    %对该列所有值都赋值为0
                     t_3 = t_2
                     j_3 = 1

                     while  j_3 < Row_SMM                          
                         if  SMM(j_3,t_3) > 0
                             SMM(j_3,t_3) = 0
                         end
                         j_3 =j_3 + 1
                     end  
                 end 
             end

 % 2.2.2 如果第一个元素大于当月需求，则需求变为0，同时该位置的供应以及该料号所有行的供应变为原来的供应减去当时的需求
                             
             if  SMM(j_2,t_2) > SMM(j_2,Column_SMM - 3)

 %需求等于0，则不变
                 if  AggDemB(j) == 0

                     SMM(j_2,t_2) =SMM(j_2,t_2);
                     SMM(j_2,Column_SMM - 3) = SMM(j_2,Column_SMM - 3)
                 end
 %需求大于0：
                 if  AggDemB(j) ~= 0

                     j_4 = 1        
                     t_4 = t_2
 
                     NetValue_SMM = SMM(j_2,Column_SMM - 3) 
                     NetRate_SMM = NetValue_SMM / SMM_COPY(j_2,t_2)
                     SMM(j_2,Column_SMM - 3) = 0

                     while   j_4 < Row_SMM                          
                         if  SMM(j_4,t_4) > 0
                             SMM(j_4,t_4) = SMM(j_4,t_4)- (SMM_COPY(j_4,t_4)*NetRate_SMM)
                         end
                         j_4 =j_4 + 1
                     end
                 end   
             end
             t_2 = t_2 + 1
         end
     end
    %第j行料号执行完毕
 j = j + 1
 end

% 2.3 计算产能剩余或需求剩余
 ProSMM = SMM(1:Row_SMM-1,2:Column_SMM - 5)

 %计算每个模具的剩余产能
 ProSMM(find(ProSMM == 0)) = NaN                      %不计算0元素
 SMM_min = min(ProSMM)
 SMM_min(find(isnan(SMM_min) == 1)) = 0

 SecondMonSup = sum(SMM_min)
 SecondMonDem = sum(sum(SMM(:,Column_SMM-3)))
 DeltaSecondMon = SecondMonDem - SecondMonSup

% 3.  对第3个月进行分配
 ThirdMonMatrix = [FinalMatrix_MaterialID FinalMatrix_Sup_ThirdMon FinalMatrix_Dem]
 p = 1      %代表第1行
 TMM = FirstMonMatrix
 TMM_Copy = FirstMonMatrix

 Row_TMM = size(TMM,1)
 Column_TMM = size(TMM,2) 
    
 while   p < Row_TMM                               % 从第2行到最后一行  

         AggSupC(p) = sum(TMM(p,2:Column_TMM - 5))      % 第p行的总供应,从第二列开始取，算入料号列
         AggDemC(p) = TMM(p,Column_TMM - 2)             % 第p行第3个月的需求

% 3.1 当供应小于需求时

     if  AggSupC(p) < AggDemC(p)     
         DiffC(p) = AggDemC(p) - AggSupC(p)         %计算该料号在该月的短缺
         TMM(p,Column_TMM-2) = DiffC(p)             %将该列的需求变为短缺的值
 % 从非料号列第1列开始，找出第p行的非零元素，将这些元素的值替换为0，并且将后面所有行的对应该模具的产能变为0  
 % 注意区分p_0和p_1，在第二层循环时不能用与第一个循环相同的参数

         p_1 = 1                                    %从第2行开始计数
         y_1 = 2                                    %从第2列开始计数
         p_0 = p
                 
         while   y_1 < Column_TMM - 4
             if  TMM(p_0,y_1) > 0                   %如果第p_0行第y_1列大于0
                 TMM(1:Row_TMM-1,y_1) = 0             %对该列除第一行总供应行所有值都赋值为0
             end
             y_1 = y_1 + 1                  
         end
         p_1 = 1                                    %重新定义p_1的值，否则将会变成上一次循环迭代后的数值
     end  
 % 第p_0行的找出完毕
    
% 3.2 当供应大于需求时，且需求不为0时

     if  AggSupC(p) > AggDemC(p) 
         p_2 = p
         y_2 = 2

         while   y_2 < Column_TMM - 4

 % 3.2.1 如果第一个元素小于当月需求，则新的需求是原来的需求减去该元素表示的供应，同时该位置的供应以及该料号【以下的行，还是所有行？】在这里是所有行的供应变为0
             if  TMM(p_2,y_2) < TMM(p_2,Column_TMM - 2)     

 %对非0元素执行此操作，0元素表示该模具不生产该料号 
                 if  TMM(p_2,y_2) > 0 

                     TMM(p_2,Column_TMM - 2) = TMM(p_2,Column_TMM - 2) - TMM(p_2,y_2)
                     TMM(p_2,y_2) = 0

 %对该列所有值都赋值为0
                     y_3 = y_2
                     p_3 =1

                     while   p_3 < Row_TMM  

                         if  TMM(p_3,y_3) > 0

                             TMM(p_3,y_3) = 0
                         end
                     p_3 =p_3+1
                 end  
             end 
         end

 % 3.2.2 如果第一个元素大于当月需求，则需求变为0，同时该位置的供应以及该料号所有行的供应变为原来的供应减去当时的需求
                             
             if  TMM(p_2,y_2) > TMM(p_2,Column_TMM - 2)

 % 需求等于0，则不变
                 if  AggDemC(p) == 0

                     TMM(p_2,y_2) =TMM(p_2,y_2);
                     TMM(p_2,Column_TMM-2) = TMM(p_2,Column_TMM-2)
                 end

 % 需求大于0：
                 if  AggDemC(p) ~= 0
                   
                     p_4 = 1        
                     y_4 = y_2

                     NetValue_TMM = TMM(p_2,Column_TMM - 2) 
                     NetRate_TMM = NetValue_TMM / TMM_Copy(p_2,y_2)
                     TMM(p_2,Column_TMM - 2) = 0

                     while   p_4 < Row_TMM                          
                         if  TMM(p_4,y_4) > 0

                             TMM(p_4,y_4) = TMM(p_4,y_4) - (TMM_Copy(p_4,y_4) * NetRate_TMM)
                         end
                         p_4 =p_4 + 1
                     end
                 end   
             end
             y_2 = y_2 + 1
         end
     end
 % 第p行料号执行完毕
 p = p + 1
 end

% 3.3 计算产能剩余或需求剩余
 ProTMM = TMM(1:Row_TMM-1,2:Column_TMM - 5)

 %计算每个模具的剩余产能
 ProTMM(find(ProTMM == 0)) = NaN  %不计算0元素
 TMM_min = min(ProTMM)
 TMM_min(find(isnan(TMM_min) == 1)) = 0

 ThirdMonSup = sum(TMM_min)
 ThirdMonDem = sum(TMM(:,Column_TMM - 2))
 DeltaThirdMon = ThirdMonDem - ThirdMonSup

% 4. 输出结果
 if (DeltaFirstMon < 0 && DeltaSecondMon < 0 && DeltaThirdMon < 0)
     Reports = [Reports;FileNames{i},'不存在产能瓶颈']
 end
 if (DeltaFirstMon > 0 && DeltaSecondMon > 0 && DeltaThirdMon > 0)
     Reports = [Reports;FileNames{i},'存在长期期瓶颈，本月缺口为',num2str(DeltaFirstMon),'下个月缺口为',num2str(DeltaSecondMon),'第三个月缺口为',num2str(DeltaThirdMon),'总缺口为',num2str(DeltaFirstMon + DeltaSecondMon + DeltaThirdMon),'建议评估加开一套复制模']
 end

 if (DeltaFirstMon > 0 && DeltaSecondMon < 0 && DeltaThirdMon < 0 && DeltaFirstMon + DeltaSecondMon + DeltaThirdMon < 0)
     Reports = [Reports;FileNames{i},'存在短期瓶颈，本月缺口为',num2str(DeltaFirstMon),'下个月不存在瓶颈','第三个月不存在瓶颈，且产能可以抵消前两个月的缺口，建议平滑MPS']
 end
 if (DeltaFirstMon > 0 && DeltaSecondMon < 0 && DeltaThirdMon < 0 && DeltaFirstMon + DeltaSecondMon + DeltaThirdMon > 0)
     Reports = [Reports;FileNames{i},'存在长期瓶颈，本月缺口为',num2str(DeltaFirstMon),'下个月不存在瓶颈且第三个月不存在瓶颈，但产能无法抵消前本月的缺口，总缺口为',num2str(DeltaFirstMon + DeltaSecondMon + DeltaThirdMon),'建议评估加开一套复制模']
 end

 if (DeltaFirstMon > 0 && DeltaSecondMon > 0 && DeltaThirdMon < 0 && DeltaFirstMon + DeltaSecondMon + DeltaThirdMon < 0)
     Reports = [Reports;FileNames{i},'存在短期瓶颈，本月缺口为',num2str(DeltaFirstMon),'下个月缺口为',num2str(DeltaSecondMon),'第三个月不存在瓶颈，且产能可以抵消前两个月的缺口，建议平滑MPS']
 end
 if (DeltaFirstMon > 0 && DeltaSecondMon > 0 && DeltaThirdMon < 0 && DeltaFirstMon + DeltaSecondMon + DeltaThirdMon > 0)
     Reports = [Reports;FileNames{i},'存在长期瓶颈，本月缺口为',num2str(DeltaFirstMon),'下个月缺口为',num2str(DeltaSecondMon),'第三个月不存在瓶颈，但产能无法抵消前两个月的缺口，总缺口为',num2str(DeltaFirstMon + DeltaSecondMon + DeltaThirdMon),'建议评估加开一套复制模']
 end

 if (DeltaFirstMon > 0 && DeltaSecondMon < 0 && DeltaThirdMon > 0 && DeltaFirstMon + DeltaSecondMon + DeltaThirdMon < 0)
     Reports = [Reports;FileNames{i},'存在短期瓶颈，本月缺口为',num2str(DeltaFirstMon),'下个月无缺口，第三个月缺口为',num2str(DeltaThirdMon),'总体来看第二个月产能可以抵消的缺口，建议平滑MPS']
 end
 if (DeltaFirstMon > 0 && DeltaSecondMon < 0 && DeltaThirdMon > 0 && DeltaFirstMon + DeltaSecondMon + DeltaThirdMon > 0)
     Reports = [Reports;FileNames{i},'存在长期瓶颈，本月缺口为',num2str(DeltaFirstMon),'下个月无缺口，第三个月缺口为',num2str(DeltaThirdMon),'但是第二个月产能不足以抵消的缺口，建议评估加开一套复制模']
 end

 if (DeltaFirstMon < 0 && DeltaSecondMon > 0 && DeltaThirdMon < 0 && DeltaFirstMon + DeltaSecondMon + DeltaThirdMon < 0)
     Reports = [Reports;FileNames{i},'存在短期瓶颈，本月无缺口，下个月缺口为',num2str(DeltaSecondMon),'第三个月无缺口，体来看第二个月缺口能被抵消，建议平滑MPS']
 end
 if (DeltaFirstMon < 0 && DeltaSecondMon > 0 && DeltaThirdMon < 0 && DeltaFirstMon + DeltaSecondMon + DeltaThirdMon > 0)
     Reports = [Reports;FileNames{i},'存在瓶颈，本月无缺口，下个月缺口为',num2str(DeltaSecondMon),'第三个月无缺口，总体来看第二个月缺口无法被抵消，建议评估加开一套复制模']
 end

 if (DeltaFirstMon < 0 && DeltaSecondMon > 0 && DeltaThirdMon > 0 && DeltaFirstMon + DeltaSecondMon + DeltaThirdMon < 0)
     Reports = [Reports;FileNames{i},'存在长期瓶颈，本月无缺口，下个月缺口为',num2str(DeltaSecondMon),'第三个月缺口为',num2str(DeltaThirdMon),'建议评估加开一套复制模']
 end
 if (DeltaFirstMon < 0 && DeltaSecondMon > 0 && DeltaThirdMon > 0 && DeltaFirstMon + DeltaSecondMon + DeltaThirdMon > 0)
     Reports = [Reports;FileNames{i},'存在长期瓶颈，本月无缺口，下个月缺口为',num2str(DeltaSecondMon),'第三个月缺口为',num2str(DeltaThirdMon),'，总缺口为',num2str(DeltaFirstMon + DeltaSecondMon + DeltaThirdMon),'，建议评估加开一套复制模']
 end

 if (DeltaFirstMon < 0 && DeltaSecondMon < 0 && DeltaThirdMon > 0 && DeltaFirstMon + DeltaSecondMon + DeltaThirdMon < 0)
     Reports = [Reports;FileNames{i},'存在短期瓶颈，本月无缺口，下个月无缺口，第三个月为',num2str(DeltaThirdMon),'总体看来无短缺，建议平滑MPS']
 end
 if (DeltaFirstMon < 0 && DeltaSecondMon < 0 && DeltaThirdMon > 0 && DeltaFirstMon + DeltaSecondMon + DeltaThirdMon < 0)
     Reports = [Reports;FileNames{i},'存在短期瓶颈，本月无缺口，下个月无缺口，第三个月为',num2str(DeltaThirdMon),'，总体看来短缺无法被满足，建议评估加开一套复制模']
 end


 Reports_1 = FMM(:,Column_FMM - 4)
 Reports_2 = SMM(:,Column_SMM - 3)
 Reports_3 = TMM(:,Column_TMM - 2)

 for r = 1: Row_FinalMatrix

     if  Reports_1(r) + Reports_2(r) + Reports_3(r) == 0
         Reports = [Reports; '料号',num2str(FinalMatrix(r,1)),'不存在产能瓶颈']
     end

     if (Reports_1(r) >0 && Reports_2(r) >0 &&  Reports_3(r) > 0)
         Reports = [Reports; '该料号',num2str(FinalMatrix(r,1)),'存在长期产能瓶颈，建议评估加开复制模，','本月缺口为',num2str(Reports_1(r)),'第二个月缺口为',num2str(Reports_2(r)),'第三个月缺口为',num2str(Reports_3(r))]
     end

     if  (Reports_1(r) > 0 && Reports_2(r) + Reports_3(r) == 0 && Reports_1(r) < sum(SMM(r, 1 : Column_SMM-4)) + sum(TMM(r, 1 : Column_SMM-4)))
         Reports = [Reports; '该料号',num2str(FinalMatrix(r,1)),'在本月存在短期产能瓶颈,缺口为',num2str(Reports_1(r)),'后两月不存在瓶颈且产能剩余可抵销本月缺口，建议平滑MDS']
         end

     if  (Reports_1(r) > 0 && Reports_2(r) + Reports_3(r) == 0 && Reports_1(r) > sum(SMM(r, 1 : Column_SMM-4)) + sum(TMM(r, 1 : Column_SMM-4)))
         Reports = [Reports; '该料号',num2str(FinalMatrix(r,1)),'在本月存在短期产能瓶颈,缺口为',num2str(Reports_1(r)),'后两月不存在瓶颈且产能剩余无法抵销本月缺口，建议评估加开一套复制模']
         end

     if  (Reports_1(r) > 0 && Reports_2(r) >0 && Reports_3(r) == 0 && Reports_1(r) + Reports_2(r) < sum(TMM(r, 1 : Column_SMM-4)))
         Reports = [Reports; '该料号',num2str(FinalMatrix(r,1)),'存在短期产能瓶颈，本月缺口为',num2str(Reports_1(r)),'下月缺口为',num2str(Reports_2(r)),'第三个月不存在瓶颈且产能剩余可抵销本月和下月缺口，建议平滑MDS']
         end

     if  (Reports_1(r) > 0 && Reports_2(r) >0 && Reports_3(r) == 0 && Reports_1(r) + Reports_2(r) > sum(TMM(r, 1 : Column_SMM-4)))
         Reports = [Reports; '该料号',num2str(FinalMatrix(r,1)),'存在短期产能瓶颈，本月缺口为',num2str(Reports_1(r)),'下月缺口为',num2str(Reports_2(r)),'第三个月不存在瓶颈且产能剩余无法抵销本月和下月缺口，建议评估加开一套复制模']
         end
    
     if  (Reports_1(r) > 0 && Reports_2(r) == 0 && Reports_3(r) > 0 && Reports_1(r) + Reports_3(r) < sum(SMM(r, 1 : Column_SMM-4)))
         Reports = [Reports; '该料号',num2str(FinalMatrix(r,1)),'存在短期产能瓶颈，本月缺口为',num2str(Reports_1(r)),'第三个月缺口为',num2str(Reports_3(r)),'下个月不存在瓶颈且产能剩余可抵销本月和第三个月缺口，建议平滑MDS']
         end

     if  (Reports_1(r) > 0 && Reports_2(r) == 0 && Reports_3(r) > 0 && Reports_1(r) + Reports_3(r) > sum(SMM(r, 1 : Column_SMM-4)))
         Reports = [Reports; '该料号',num2str(FinalMatrix(r,1)),'存在短期产能瓶颈，本月缺口为',num2str(Reports_1(r)),'第三个月缺口为',num2str(Reports_3(r)),'下个月不存在瓶颈且产能剩余无法抵销本月和第三个月缺口，建议评估加开一套复制模']
         end

     if  (Reports_1(r) == 0 && Reports_2(r) >0 && Reports_3(r) == 0 &&  Reports_2(r) < sum(FMM(r, 1 : Column_FMM-4)) + sum(TMM(r, 1 : Column_FMM-4)))
         Reports = [Reports; '该料号',num2str(FinalMatrix(r,1)),'存在短期产能瓶颈，本月无缺口，下月缺口为',num2str(Reports_2(r)),'第三个月不存在瓶颈且产能剩余可抵销下月缺口，建议平滑MDS']
         end

     if  (Reports_1(r) == 0 && Reports_2(r) >0 && Reports_3(r) == 0 &&  Reports_2(r) > sum(FMM(r, 1 : Column_FMM-4)) + sum(TMM(r, 1 : Column_FMM-4)))
         Reports = [Reports; '该料号',num2str(FinalMatrix(r,1)),'存在短期产能瓶颈，本月无缺口，下月缺口为',num2str(Reports_2(r)),'第三个月不存在瓶颈但产能剩余无法抵销下月缺口，建议评估加开一套复制模']
         end
    

     if  (Reports_1(r) == 0 && Reports_2(r) == 0 && Reports_3(r) > 0 &&  Reports_3(r) < sum(FMM(r, 1 : Column_FMM-4)) + sum(SMM(r, 1 : Column_FMM-4)))
         Reports = [Reports; '该料号',num2str(FinalMatrix(r,1)),'存在短期产能瓶颈，本月无缺口，第三个月缺口为',num2str(Reports_3(r)),'下个月不存在瓶颈且产能剩余可抵销缺口，建议平滑MDS']
         end

     if  (Reports_1(r) == 0 && Reports_2(r) == 0 && Reports_3(r) > 0 &&  Reports_3(r) > sum(FMM(r, 1 : Column_FMM-4)) + sum(SMM(r, 1 : Column_FMM-4)))
         Reports = [Reports; '该料号',num2str(FinalMatrix(r,1)),'存在短期产能瓶颈，本月无缺口，第三个月缺口为',num2str(Reports_3(r)),'下个月不存在瓶颈且产能剩余无法抵销缺口，建议评估加开一套复制模']
         end
 end
 end
 xlswrite(fullfile(Path,'模具分析结果.xlsx'),Reports);        % 保存文件名
